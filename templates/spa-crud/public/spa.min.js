class SPA{constructor(route){this.content=document.querySelector("div.content");this.loading=document.querySelector("div.loading").classList;this.Model=new Model;this.view=new View;this.controller=new Controller(this.Model);window.addEventListener("hashchange",()=>{this.loadingStart();this.Model.dataBind={};let page=`${window.location.hash.slice(1).split("?")[0]}`;document.body.id=page;this.controller[page]().then(()=>{this.renderContent(this.view[page]).bindModelText().parseEvents().twoWayFormBind().loadingEnd().cleanNavLinks()}).catch(err=>{this.renderContent("<p>There was an error with the request</p>").loadingEnd().cleanNavLinks();console.error(err)});window.location.href.replace(window.location.search,"")});if(!window.location.hash&&typeof route==="string"){window.location.hash=route}window.dispatchEvent(new HashChangeEvent("hashchange"))}loadingStart(){this.loading.add("visible");return this}loadingEnd(){this.loading.remove("visible");return this}renderContent(html){this.content.innerHTML=html;return this}update(evt,funcName){this.Model[funcName](evt).then(()=>{this.bindModelText().parseEvents().twoWayFormBind()})}cleanNavLinks(){let links=document.querySelector("nav").querySelectorAll("a");links.forEach(link=>{link.setAttribute("href",`${link.origin}${link.hash}`)});return this}parseEvents(){let contents=this.content.querySelectorAll("*[data-event]");contents.forEach(domElem=>{const[evtName,funcName]=domElem.dataset.event.split(":");domElem.addEventListener(evtName,evt=>{return this.update(evt,funcName)});delete domElem.dataset.event});return this}twoWayFormBind(){let form=this.content.querySelector("form[data-bindall]");if(form){form.addEventListener("change",event=>{const target=event.target;const property=target.name;if(property&&target.matches("input, select, textarea")){this.Model.dataBind[property]=target.value}});delete form.dataset.bindall}return this}bindModelText(){let contents=this.content.querySelectorAll("*[data-bindtext], input[name], select[name], textarea[name]");const obj=this.Model.dataBind;if(contents){contents.forEach(domElem=>{const property=domElem.name||domElem.dataset.bindtext;const selector=`*[data-bindText="${property}"], input[name="${property}"], select[name="${property}"], textarea[name="${property}"]`;let val,safeVal;const useSafeHTML=domElem.hasAttribute("data-safe");if(obj[property]){val=obj[property];safeVal=this.Model.escapeHTML(val);if("value"in domElem)domElem.value=useSafeHTML?safeVal:val;else if("innerHTML"in domElem)domElem.innerHTML=useSafeHTML?safeVal:val}Object.defineProperty(obj,property,{get:()=>{return val},set:newValue=>{let elems=document.querySelectorAll(selector);val=newValue;safeVal=this.Model.escapeHTML(val);if(elems){elems.forEach(elem=>{if("value"in elem)elem.value=useSafeHTML?safeVal:val;else if("innerHTML"in elem)elem.innerHTML=useSafeHTML?safeVal:val})}},configurable:true})})}return this}}class BaseModel{constructor(){this.APIS={};this.dataBind={};this.http={get:url=>{return this.httpFetch(url,null,"GET").then(response=>response.json())},post:(url,data)=>{return this.httpFetch(url,data,"POST").then(response=>response.json())},put:(url,data)=>{return this.httpFetch(url,data,"PUT").then(response=>response.json())},delete:url=>{return this.httpFetch(url,null,"DELETE")}}}escapeHTML(html){let div=document.createElement("div");div.appendChild(document.createTextNode(html));return div.innerHTML}httpFetch(url,data,verb){let myHeaders=new Headers;myHeaders.set("Content-Type","application/json");let myInit={method:verb,headers:myHeaders,mode:"cors",cache:"default"};if(data){myInit.body=JSON.stringify(data)}const myRequest=new Request(url,myInit);return fetch(myRequest).then(response=>{if(!response.ok)throw Error(response.statusText);return response})}generateUrlParams(params={}){const esc=encodeURIComponent;return`?${Object.keys(params).map(k=>`${esc(k)}=${esc(params[k])}`).join("&")}`}urlParams(){return new URLSearchParams(window.location.search)}}class Components{static reverseSring(str){return`<p>${str.split("").reverse().join("")}</p>`}static todoList(data){if(!Array.isArray(data))return"";return`<ol class="list">\n                    ${data.map(row=>`<li>\n                        <input type="checkbox" id="check-${row.id}" ${row.completed?'checked="checked"':""}">\n                        <label for="check-${row.id}">${row.title}</label>\n                    </li>`).join("")}\n                </ol>`}}class Controller{constructor(model){this.Model=model}home(){return this.Model.getHomeMessage()}form(){return Promise.resolve()}test(){return Promise.resolve()}todo(){return this.Model.getTodo()}safe(){return this.Model.setTest()}}class Model extends BaseModel{constructor(){super();this.APIS={Todo:"public/todo.json"}}getHomeMessage(){const msg="Hello Home Page";this.dataBind.msg=msg;this.dataBind.msgReverse=Components.reverseSring(msg);return Promise.resolve()}getTodo(){return this.http.get(this.APIS.Todo).then(data=>{return this.dataBind.todoList=Components.todoList(data)})}setTest(){this.dataBind.test=this.urlParams().get("id");return Promise.resolve()}}class View{get home(){const html=`<h1>Home page</h1>\n                      <div data-bindText="msg"></div>\n                      <div data-bindText="msgReverse"></div>`;return html}get form(){return`<h1>Form page</h1>\n                <form data-bindall>\n                    <p>Blur out of the field to see the bind data update</p>\n                    <p>\n                        <label>Author</label>\n                        <input type="text" name="author" />\n                        <p data-bindtext="author"></p>\n                    </p>\n                    <p>\n                        <label>Rating</label>\n                        <select name="rating">\n                            <option value="1">1</option>\n                            <option value="2">2</option>\n                            <option value="3">3</option>\n                            <option value="4">4</option>\n                            <option value="5">5</option>\n                        </select>\n                        <p data-bindtext="rating"></p>\n                    </p>\n                </form>`}get todo(){return`<h1>Todo Fetch List</h1>\n                <div data-bindText="todoList"></div>`}get test(){return`test`}get safe(){return`<h1>Safe HTML Test</h1>\n                <p>Most modern browsers have support to protect from xss attacks</p>\n                <p><a href="?id=<strong>Is safe HTML?</strong>#safe">Click to Reload with unsafe URL Params</a></p>\n                <p> Safe Text: <span data-bindtext="test" data-safe></span></p>\n                <p> NOT Safe Text: <span data-bindtext="test"></span></p>\n                <p> Safe HTML Input: <br /> <textarea data-bindText="test" data-safe></textarea></p>\n                <p> Safe HTML Input: <br /> <textarea data-bindText="test"></textarea></p>\n                `}}