class SPA{constructor(route){this.content=document.querySelector("div.spa-content");this.loading=document.querySelector("div.spa-loading").classList;this.Model=new Model;this.view=new View;this.controller=new Controller(this.Model);window.addEventListener("hashchange",()=>{this.loadingStart();this.Model.dataBind={};let page=`${window.location.hash.slice(1).split("?")[0]}`;document.body.id=page;this.controller[page]().then(()=>{return this.renderContent(this.view[page])}).then(()=>{this.bindModelText().parseEvents().twoWayInputBind().cleanNavLinks().loadingEnd()}).catch(err=>{console.error(err);this.renderContent(this.Model.escapeHTML(err)).cleanNavLinks().loadingEnd()})});if(!window.location.hash&&typeof route==="string"){window.location.hash=route}window.dispatchEvent(new HashChangeEvent("hashchange"))}loadingStart(){this.loading.add("visible");return this}loadingEnd(){this.loading.remove("visible");window.dispatchEvent(new CustomEvent("sparouteload"));return this}renderContent(page){return page.then(html=>{this.content.innerHTML=html;return this})}update(evt,funcName){this.Model[funcName](evt).then(()=>{this.bindModelText().parseEvents().twoWayInputBind()})}cleanNavLinks(){let links=document.querySelector("nav").querySelectorAll("a");links.forEach(link=>{link.setAttribute("href",`${window.location.origin}${link.hash}`)});return this}parseEvents(){let contents=this.content.querySelectorAll("*[data-event]");contents.forEach(domElem=>{const[evtName,funcName]=domElem.dataset.event.split(":");domElem.addEventListener(evtName,evt=>{return this.update(evt,funcName)});delete domElem.dataset.event});return this}twoWayInputBind(){let inputs=this.content.querySelectorAll("input[name], select[name], textarea[name]");inputs.forEach(domElem=>{if(!domElem.dataset.hasOwnProperty("bindEnabled")){domElem.dataset.bindEnabled="true";domElem.addEventListener("input",evt=>{const target=evt.target;const property=target.name;if(!target.dataset.hasOwnProperty("bindIgnore")){this.Model.dataBind[property]=target.value}})}});return this}bindModelText(){let contents=this.content.querySelectorAll("*[data-bindtext], input[name], select[name], textarea[name]");const obj=this.Model.dataBind;if(contents){contents.forEach(domElem=>{const property=domElem.name||domElem.dataset.bindtext;const selector=`*[data-bindText="${property}"], input[name="${property}"], select[name="${property}"], textarea[name="${property}"]`;let val,safeVal;const useSafeHTML=domElem.hasAttribute("data-safe");if(obj.hasOwnProperty(property)&&obj[property]!==undefined){val=obj[property];safeVal=this.Model.escapeHTML(val);if("value"in domElem)domElem.value=useSafeHTML?safeVal:val;else if("innerHTML"in domElem)domElem.innerHTML=useSafeHTML?safeVal:val}if(!domElem.matches("input, select, textarea")&&domElem.dataset.bindtext)if(!domElem.innerHTML.length)domElem.dataset.bindDisplay="hidden";else domElem.dataset.bindDisplay="visible";Object.defineProperty(obj,property,{get:()=>{return val},set:newValue=>{let elems=document.querySelectorAll(selector);val=newValue;safeVal=this.Model.escapeHTML(val);if(elems){elems.forEach(elem=>{if("value"in elem)elem.value=useSafeHTML?safeVal:val;else if("innerHTML"in elem)elem.innerHTML=useSafeHTML?safeVal:val;if(!elem.matches("input, select, textarea")&&elem.dataset.bindtext)if(!elem.innerHTML.length)elem.dataset.bindDisplay="hidden";else elem.dataset.bindDisplay="visible"})}},configurable:true})})}return this}}class BaseModel{constructor(){this.APIS={};this.dataBind={};this.http={get:url=>{return this.httpFetch(url,null,"GET").then(response=>response.json())},post:(url,data)=>{return this.httpFetch(url,data,"POST").then(response=>response.json())},put:(url,data)=>{return this.httpFetch(url,data,"PUT").then(response=>response.json())},delete:url=>{return this.httpFetch(url,null,"DELETE")}}}escapeHTML(html){let div=document.createElement("div");div.appendChild(document.createTextNode(html));return div.innerHTML}httpFetch(url,data,verb){let myHeaders=new Headers;myHeaders.set("Content-Type","application/json");let myInit={method:verb,headers:myHeaders,mode:"cors",cache:"default"};if(data){myInit.body=JSON.stringify(data)}const myRequest=new Request(url,myInit);return fetch(myRequest).then(response=>{if(!response.ok)throw Error(response.statusText);return response})}generateUrlParams(params={}){return`?${Object.keys(params).map(k=>[k,params[k]].map(window.encodeURIComponent).join("=")).join("&")}`}urlParams(){return new URLSearchParams(window.location.search)}}class Components{static todoTable(data){if(!Array.isArray(data))return"";return`${data.map(row=>`<tr>\n                        <td>${row.id}</td>\n                        <td>${row.title}</td>\n                        <td>${row.completed}</td>\n                        <td><button data-id="${row.id}" data-event="click:deleteTodo" class="button is-danger is-outlined">Delete</button></td>\n                        <td><button data-id="${row.id}" data-event="click:goToUpdatePage" class="button is-link is-outlined">Update</button></td>\n                    </tr>`).join("")}`}}class Controller{constructor(model){this.Model=model}home(){return this.Model.getTodoList()}add(){return Promise.resolve()}update(){return this.Model.updatePageLoad()}test(){this.Model.setReviews();return Promise.resolve()}}class Model extends BaseModel{constructor(){super();this.APIS={Todo:`//${window.location.hostname}:3001/todo/`}}getTodoList(){return this.http.get(this.APIS.Todo).then(data=>{return this.dataBind.todoTable=Components.todoTable(data)})}deleteTodo(evt){const url=`${this.APIS.Todo}${evt.target.dataset.id}`;return this.http.delete(url).then(()=>{return this.dataBind.deleteResultMsg="Todo Deleted"}).catch(err=>{return this.dataBind.deleteResultMsg="Todo was NOT Deleted"}).then(()=>{return this.getTodoList()})}saveTodo(evt){let form=evt.target.form;if(!form.checkValidity()){this.dataBind.saveResultMsg="All fields are required";return Promise.resolve()}const data={title:this.dataBind.title,completed:this.dataBind.completed};return this.http.post(this.APIS.Todo,data).then(data=>{this.dataBind.saveResultMsg="Todo Saved";return data}).catch(err=>{this.dataBind.saveResultMsg="Todo was NOT Saved";return err})}goToUpdatePage(evt){this.redirect("update",{id:evt.target.dataset.id});return Promise.resolve()}updatePageLoad(){const url=`${this.APIS.Todo}${this.urlParams().get("id")}`;return this.http.get(url).then(data=>{this.dataBind.title=data.title;this.dataBind.completed=data.completed;this.dataBind.id=data.id;return data})}updateTodo(evt){let form=evt.target.form;if(!form.checkValidity()){this.dataBind.updateResultMsg="All fields are required";return Promise.resolve()}const data={title:this.dataBind.title,completed:this.dataBind.completed};const url=`${this.APIS.Todo}${this.dataBind.id}`;return this.http.put(url,data).then(data=>{this.dataBind.updateResultMsg="Todo updated";return data}).catch(err=>{this.dataBind.updateResultMsg="Todo was NOT updated";return err})}setReviews(){this.dataBind.reviews="<strong> testing reviews</strong>";return Promise.resolve()}updateReview(evt){console.log(this.dataBind);this.dataBind.reviews3=this.dataBind.reviews}}class View{get home(){return Promise.resolve(`<section class="hero is-info is-small spacer">\n                    <div class="hero-body">\n                        <h1 class="title">Todo Crud Sample</h1>\n                    </div>\n                </section>\n                <p data-bindtext="deleteResultMsg" data-safe data-bindcss="{fail: 'classname', pass: 'classname'}" class="notification is-warning is-spaced"></p>              \n                <table class="table is-spaced is-bordered is-hoverable is-fullwidth is-small">\n                  <thead>\n                    <tr class="is-selected">\n                        <th>ID</th>\n                        <th>Title</th>\n                        <th>Completed</th>\n                        <th></th>\n                        <th></th>\n                    </tr>\n                  </thead>\n                  <tbody data-bindtext="todoTable"></tbody>\n              </table>`)}get add(){return Promise.resolve(`<section class="hero is-info is-small spacer">\n                    <div class="hero-body">\n                        <h1 class="title">Add New Todo</h1>\n                    </div>\n                </section>\n                <form data-bindall>\n                    <div class="field">\n                        <label class="label">Title</label>\n                        <input type="text" name="title" class="input" required />\n                    </div>\n                    <div class="field">\n                        <label class="label">Completed</label>\n                        <select name="completed" class="select" required>\n                            <option value=""></option>\n                            <option value="true">true</option>\n                            <option value="false">false</option>\n                        </select>\n                    </div>\n                    <div class="field"> \n                        <input type="reset" value="reset" />\n                        <input type="button" value="submit" class="button is-link" data-event="click:saveTodo" /> \n                    </div>\n                    <p data-bindtext="saveResultMsg" data-safe class="notification is-warning"></p>\n                </form>`)}get update(){return Promise.resolve(`<section class="hero is-info is-small spacer">\n                    <div class="hero-body">\n                        <h1 class="title">Update Todo ID <span data-bindtext="id" class="has-text-warning"></span></h1>\n                    </div>\n                </section>\n                <form data-bindall>\n                    <div class="field">\n                        <label class="label">Title</label>\n                        <input type="text" name="title" class="input" required />\n                    </div>\n                    <div class="field">\n                        <label class="label">Completed</label>\n                        <select name="completed" class="select" required>\n                            <option value="true">true</option>\n                            <option value="false">false</option>\n                        </select>\n                    </div>\n                    <div class="field">\n                        <input type="button" value="submit" data-event="click:updateTodo" class="button is-link" />\n                    </div>\n                    <p data-bindtext="updateResultMsg" data-safe class="notification is-warning is-spaced"></p>\n                </form>`)}get test(){return this.fetchHTML("public/templates/test2.html")}}Object.assign(View.prototype,{fetchHTML(file){return fetch(file).then(response=>{if(!response.ok)throw Error(response.statusText);return response.text()}).then(text=>{let doc=(new DOMParser).parseFromString(text,"text/html");console.log(doc.body.innerHTML.toString());return doc.body.innerHTML.toString()}).catch(err=>{console.error(err);return"<p>Could not fetch file: ${file}</p>"})}});NodeList.prototype.forEach=Array.prototype.forEach;window.addEventListener("sparouteload",()=>{document.querySelectorAll("form").forEach(form=>{form.addEventListener("submit",event=>event.preventDefault())})});Object.assign(BaseModel.prototype,{redirect(route=window.location.hash.slice(1).split("?")[0],params={}){const query=this.generateUrlParams(params);window.location.assign(`${query}#${route}`)}});