class SPA{constructor(route){this.content=document.querySelector("div.content");this.loading=document.querySelector("div.loading").classList;this.model=new Model;this.view=new View;this.controller=new Controller(this.model);window.addEventListener("hashchange",()=>{this.loadingStart();this.model.dataBind={};let page=`${window.location.hash.slice(1).split("?")[0]}`;document.body.id=page;this.controller[page]().then(()=>{this.renderContent(this.view[page]).bindModelText().parseEvents().twoWayFormBind().loadingEnd()}).catch(err=>{this.renderContent("<p>There was an error with the request</p>").loadingEnd();console.error(err)})});if(!window.location.hash&&typeof route==="string"){window.location.hash=route}window.dispatchEvent(new HashChangeEvent("hashchange"))}loadingStart(){this.loading.add("visible");return this}loadingEnd(){this.loading.remove("visible");return this}renderContent(html){this.content.innerHTML=html;return this}update(evt,funcName){this.model[funcName](evt).then(()=>{this.bindModelText().parseEvents().twoWayFormBind()})}parseEvents(){let contents=this.content.querySelectorAll("*[data-event]");contents.forEach(domElem=>{const[evtName,funcName]=domElem.dataset.event.split(":");domElem.addEventListener(evtName,evt=>{return this.update(evt,funcName)});delete domElem.dataset.event});return this}twoWayFormBind(){let form=this.content.querySelector("form[data-bindall]");if(form){form.addEventListener("change",event=>{const target=event.target;const property=target.name;if(property&&target.matches("input")||target.matches("select")){this.model.dataBind[property]=target.value}});delete form.dataset.bindall}return this}bindModelText(){let contents=this.content.querySelectorAll("*[data-bindtext],input[name], select[name]");const obj=this.model.dataBind;if(contents){contents.forEach(domElem=>{const property=domElem.name||domElem.dataset.bindtext;const selector=`*[data-bindText="${property}"],input[name="${property}"], select[name="${property}"]`;let val;if(obj[property]){val=obj[property];if("value"in domElem)domElem.value=val;else if("innerHTML"in domElem)domElem.innerHTML=val}Object.defineProperty(obj,property,{get:function(){return val},set:function(newValue){let elems=document.querySelectorAll(selector);val=newValue;if(elems){elems.forEach(elem=>{if("value"in elem)elem.value=val;else if("innerHTML"in elem)elem.innerHTML=val})}},configurable:true})})}return this}}class BaseModel{constructor(){this.APIS={};this.dataBind={};this.http={get:url=>{return this.httpFetch(url,null,"GET").then(response=>response.json())},post:(url,data)=>{return this.httpFetch(url,data,"POST").then(response=>response.json())},put:(url,data)=>{return this.httpFetch(url,data,"PUT").then(response=>response.json())},delete:url=>{return this.httpFetch(url,null,"DELETE")}}}httpFetch(url,data,verb){let myHeaders=new Headers;myHeaders.set("Content-Type","application/json");let myInit={method:verb,headers:myHeaders,mode:"cors",cache:"default"};if(data){myInit.body=JSON.stringify(data)}const myRequest=new Request(url,myInit);return fetch(myRequest).then(response=>{if(!response.ok)throw Error(response.statusText);return response})}urlParams(){return new URLSearchParams(window.location.search)}}class Components{static reverseSring(str){return`<p>${str.split("").reverse().join("")}</p>`}static todoList(data){if(!Array.isArray(data))return"";return`<ol class="list">\n                    ${data.map(row=>`<li>\n                        <input type="checkbox" id="check-${row.id}" ${row.completed?checked="checked":""}">\n                        <label for="check-${row.id}">${row.title}</label>\n                    </li>`).join("")}\n                </ol>`}}class Controller{constructor(model){this.Model=model}home(){return this.Model.getHomeMessage()}test(){return Promise.resolve()}todo(){return this.Model.getTodo()}}class Model extends BaseModel{constructor(){super();this.APIS={Todo:"public/todo.json"}}getHomeMessage(){const msg="Hello Home Page";this.dataBind.msg=msg;this.dataBind.msgReverse=Components.reverseSring(msg);return Promise.resolve()}getTodo(){return this.http.get(this.APIS.Todo).then(data=>{return this.dataBind.todoList=Components.todoList(data)})}}class View{get home(){const html=`<h1>Home page</h1>\n                      <div data-bindText="msg"></div>\n                      <div data-bindText="msgReverse"></div>`;return html}get todo(){return`<h1>Todo Fetch List</h1>\n                <div data-bindText="todoList"></div>`}get test(){return`test`}}